buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath 'net.fabricmc:fabric-loom:1.7-SNAPSHOT'
		classpath "net.dumbcode.gradlehook:GradleHook:1.3.1"
		classpath "net.darkhax.curseforgegradle:CurseForgeGradle:1.0.11"
		classpath "org.kohsuke:github-api:1.114"
//		classpath "org.ajoberstar.grgit:grgit-gradle:4.1.0"
		classpath "com.modrinth.minotaur:Minotaur:2.4.4"
	}
}

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "io.freefair.lombok" version "8.6"
}

//buildscript.configurations.classpath.each { println it }

//apply plugin: net.dumbcode.gradlehook.GradleWebhookPlugin
//apply plugin: net.darkhax.curseforgegradle.CurseForgeGradlePlugin
//apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin
//apply plugin: com.modrinth.minotaur.Minotaur
//apply plugin: 'maven-publish'

base {
	archivesName = project.archives_base_name
}
ext.versionDisplay = "${project.minecraft_version}-${getVersion()}"

ext.additionalProperties = new Properties()
if (file("extra.properties").exists()) {
	additionalProperties.load(file("extra.properties").newReader())
}

def getVersion() {
	if (project.hasProperty('currentTag')) {
		if (project.currentTag.startsWith("v")) {
			return project.currentTag.substring(1)
		}
		return project.currentTag
	}
	return project.mod_version
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

ext.curseReleaseType = "release"
ext.releaseChangelog = "No Changelog Available"
ext.stabilitySuffix = ""
ext.curseforgeDownloadLink = null
ext.modrinthDownloadLink = null
ext.githubDownloadLink = null
ext.releaseType = project.default_release_type

ext.mainFile = null

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

version = "${project.minecraft_version}-${project.mod_version}"
group = project.maven_group

repositories {
	mavenCentral()
	maven { url 'https://masa.dy.fi/maven' }
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url 'https://jitpack.io' }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
	modImplementation "fi.dy.masa.malilib:malilib-fabric-1.20.6:${project.malilib_version}"
	modCompileOnly "com.terraformersmc:modmenu:${project.modmenu_version}"

	implementation "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	implementation "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation "com.electronwill.night-config:toml:${project.toml_version}"
	// Transitive
	include "com.electronwill.night-config:toml:${project.toml_version}"
	include "com.electronwill.night-config:core:${project.toml_version}"

	include "com.github.DarkKronicle.Konstruct:addons:${project.konstruct_version}"
	include "com.github.DarkKronicle.Konstruct:core:${project.konstruct_version}"

	implementation "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"
	include "org.mariuszgromada.math:MathParser.org-mXparser:${project.mxparser_version}"

	implementation "org.apache.commons:commons-csv:${project.csv_version}"
	include "org.apache.commons:commons-csv:${project.csv_version}"

	// Filters
//	implementation "org.openjdk.nashorn:nashorn-core:${project.nashorn_version}"
//	implementation "org.javadelight:delight-nashorn-sandbox:${project.nashorn_sandbox_version}"
//
//	include "org.openjdk.nashorn:nashorn-core:${project.nashorn_version}"
//	include "org.javadelight:delight-nashorn-sandbox:${project.nashorn_sandbox_version}"
//	include group: 'org.webjars.bower', name: 'js-beautify', version: project.js_beautify_version
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

//tasks.withType(JavaCompile).configureEach {
//	it.options.encoding = "UTF-8"
//	it.options.release = 21
//}

jar {
	from "LICENSE.txt"
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"advancedchat" {
//			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

tasks.register('downloadExtra') {
	def f = new File('./src/client/resources/swear_words.csv')
	if (!f.exists()) {
		new URL('https://raw.githubusercontent.com/surge-ai/profanity/main/profanity_en.csv').withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}

assemble {
	dependsOn 'downloadExtra'
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}